
stage('build user') {
    steps {
        wrap([$class: 'BuildUser', useGitAuthor: true]) {
            sh 'echo ${BUILD_USER} >> Result.json'
        }
    }
}
stage('testing') {
    steps {
        script {
            STATUS = sh(script: "curl -I \$(dig +short myip.opendns.com @resolver1.opendns.com):5000 | grep \"HTTP/1.1 200 OK\" | tr -d \"\\r\\n\"", returnStdout: true).trim()
            sh 'echo "$STATUS" >> Result.json'
            sh 'echo "$TIME" >> Result.json'
            withAWS(credentials: 'awscredentials', region: 'us-east-1') {
                sh "aws dynamodb put-item --table-name test-result --item '{\"user\": {\"S\": \"${BUILD_USER}\"}, \"date\": {\"S\": \"${TIME}\"}, \"state\": {\"S\": \"${STATUS}\"}}'"
            }
        }

        script {
            def testMap = [:]
            testMap['username'] = "${env.owner}"
            testMap['timestamp'] = new Date().getTime()
            testMap['datetime'] = new Date(testMap['timestamp']).toString()

            def jsonString = groovy.json.JsonOutput.toJson(testMap)
            writeFile file: 'test-server.json', text: jsonString

            println(jsonString)
        }
    }
}

pipeline {
    agent any
    stages {
        stage('Get User Full Name') {
            steps {
                sh 'pwd'
                sh 'ls -la'
                script {
                    def testMap = [:]
                    testMap['username'] = "${env.owner}"
                    testMap['timestamp'] = new Date().getTime()
                    testMap['datetime'] = new Date(testMap['timestamp']).toString()

                    def jsonString = groovy.json.JsonOutput.toJson(testMap)
                    writeFile file: 'test-server.json', text: jsonString

                    println(jsonString)

                    def csvString = 'username,timestamp,datetime\n'
                    csvString += "${testMap['username']},${testMap['timestamp']},${testMap['datetime']}\n"
                    writeFile file: 'test-server.csv', text: csvString
                }
            }
        }
    }
}

