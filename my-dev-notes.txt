venv commands:
---------------
💲: deactivate
💲: rm -r env
💲: python -m venv env
💲: env\Scripts\activate.bat  || env/Scripts/activate.bat 
With git bash: 💲 source env/Scripts/activate

💲 cd server
💲 source env/Scripts/activate
💲 cd ../../

💲 pip install -r requirements.txt


full requirements.txt for Dokerfile
------------------------------------
enter the venv and then --> 
💲 pip freeze -r requirements.txt


Flask==2.2.3
marshmallow-sqlalchemy==0.29.0
Flask-SQLAlchemy==3.0.3
flask-marshmallow==0.14.0
Flask-Cors==3.0.10
mysqlclient==2.1.1
## The following requirements were added by pip freeze:
click==8.1.3
colorama==0.4.6
greenlet==2.0.2
importlib-metadata==6.0.0
itsdangerous==2.1.2
Jinja2==3.1.2
MarkupSafe==2.1.2
marshmallow==3.19.0
packaging==23.0
six==1.16.0
SQLAlchemy==2.0.6
typing_extensions==4.5.0
Werkzeug==2.2.3
zipp==3.15.0


https://stackoverflow.com/questions/69692842/error-message-error0308010cdigital-envelope-routinesunsupported


1) Creating && testing Dockerfile to client directory ☯
===========================================================
💲 cd C:\dev\DevOps\Projects\todos\client

nano .dockerignore
--------------------
node_modules

nano Dockerfile
-----------------
FROM node:alpine

WORKDIR /app

EXPOSE 3000

COPY package*.json ./

RUN npm install --legacy-peer-deps

COPY . .

CMD [ "npm", "start" ]


test the frotend application container
---------------------------------------
💲 cd client
💲 docker build . -t todos-app-client
💲 docker run --name todos-client -p 3333:3000 todos-app-client
💲 docker exec -it todos-client sh
/app # ls -la
/app # npm --version
9.5.0
/app # node --version
v19.7.0

docker stop todos-client

2) Creating && testing Dockerfile to server directory ☯
==========================================================

cd cd C:\dev\DevOps\Projects\todos\server

nano Dockerfile
-----------------
FROM node:alpine

WORKDIR /app

EXPOSE 5000

COPY package*.json ./

RUN npm install

COPY . ./

CMD [ "npm", "run", "dev" ]


test the server application container
----------------------------------------
💲 docker build . -t todos-app-server
💲 docker run --name todos-server -p 5555:5000 todos-app-server
💲 docker exec -it todos-server sh
💲 docker stop todos-server


Adding Docker compose file
----------------------------
making sure all data and enviroment variables are accurate

running docker compose commads
--------------------------------
💲 docker-compose up
❗ please wait till server container is running (todos-server-1) ❗❗
💲 docker-compose logs todos

💲 docker-compose down

When running the docker compose project ports change!

Connecting to adminer: <HOST>:8888
------------------------------------
System: MySql
server: mysql
Username: root
Password: 123456
Database: devops_p1

Connecting to Client: <HOST>:3333
-----------------------------------
TODO: enable hot reload of the react application with nodemon
https://www.tutorialspoint.com/how-to-hot-reload-in-reactjs-docker

Connecting to Server (For example via postman): <HOST>:5555
-------------------------------------------------------------


✔ Added test_server.py - unit tests file

run tests: 💲 docker-compose exec server python test_server.py

Running The project inside Jenkins pipeline
---------------------------------------------
if [[ $(docker ps -q -f name=<project_name>) ]]; then docker-compose down; fi
if [[ $(sudo docker ps -q -f name=todos) ]]; then echo "123456"; fi


EC2 CPU is basic - all the containers of the Compose application are running beside the server...
--------------------------------------------------------------------------------------------------
💲 cd ~/jenkins-agent/workspace/todos-test-and-deploy
💲 sudo docker compose config --services
adminer
client
mysql
server
💲 sudo docker compose up --no-deps server
💲 sudo docker logs -f todos-test-and-deploy-server-1

How To Connect Docker With Python Flask And ReactJS FrontEnd | Docker Flask React Made Easy| 2021 HD
------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=ISCiJmY1g2M&ab_channel=THESHOW


Installing npm in linux (Debian && Ubuntu)
-------------------------------------------
os inside container:
💲 cat /etc/os-release

💲 apt update
💲 apt install npm
💲 npm -v


agents working dir
--------------------
💲 cd jenkins-agent/workspace/todos-test-and-deploy


Removing all content from dir
--------------------------------
💲
sudo rm -rf ./*
sudo rm -rf .git
sudo rm -rf .gitignore



To specify a specific Docker Compose file for different environments, you can use the -f or --file option followed by the file path of the Docker Compose file you want to use.
--------------------------------------------------
💲 docker-compose -f docker-compose-prod.yml up



Checking jobs inside jenkins container:
💲 ls /var/jenkins_home/jobs/env-sort/workspace
💲 cat /var/jenkins_home/jobs/env-sort/workspace/test-server.json

Ajent-1 workspace:
💲 ubuntu@ip-172-31-56-239:~/jenkins-agent/workspace/todos-test-and-deploy$ ls
💲 cd jenkins-agent/workspace/todos-test-and-deploy
💲 cat test-results.json 



tests to check if composed project is running
-----------------------------------------------------------
sudo docker compose ps | grep 'Up'; echo $?


isRunning=$(sudo docker compose -f docker compose-prod.yml ps | grep 'Up' &> /dev/null; echo $?)
if [ $isRunning -eq 0 ]; then
    echo "running"
else
    echo "stopped"
fi

isRunning=$(sudo docker compose ps | grep 'Up' &> /dev/null; echo $?)
if [ $isRunning -eq 0 ]; then
    echo "running"
else
    echo "stopped"
fi
------------------------------------------------------------
